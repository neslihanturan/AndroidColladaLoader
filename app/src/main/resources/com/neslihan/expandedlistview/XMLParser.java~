package com.neslihan.expandedlistview;




import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import android.R.xml;
import android.util.Log;
 

public class XMLParser {
private String text ;
private String tagName;
private String attributeId;
private String attributeName;
private String attributeSemantic;
private String attributeSource;
private String attributeOffset;
Geometry geometry;
int sourceCount = -1;
int floatCount = -1;
int polyCount = -1;
int polyInputCount = -1;
int polyVcountCount = -1;
int polyPCount = -1;
int vertInputCount = -1;
boolean inPolyList = false;
boolean inVertices = false;
boolean inLibGeometry = false;
static ArrayList <Float> positionFloats = new ArrayList<Float>();
static ArrayList <Byte> indexOfPositonFloats = new ArrayList<Byte>();
static ArrayList <Float> finalList = new ArrayList<Float>();
static ArrayList <Float> finaNormallList = new ArrayList<Float>();
public float vertices[];
public float normals[];
float floatOfPosition[];



	public XMLParser(){
		
	}
	
	public void parse(InputStream inputStream){
	    XmlPullParserFactory factory = null;
        XmlPullParser parser = null;
        Log.d("MyApp","I am here2");
        try{   
	        factory = XmlPullParserFactory.newInstance();
	        factory.setNamespaceAware(true);
	        parser = factory.newPullParser();
	        parser.setInput(inputStream, null);
	        int eventType = parser.getEventType();
	        
	        outerloop:
	        while(eventType != XmlPullParser.END_DOCUMENT ){
	        	if(parser.getText()!=null)
	        		text = parser.getText();
	        		
	        	if(parser.getAttributeValue(null, "id") != null)
	        		attributeId = parser.getAttributeValue(null, "id");
	        	
	        	if(parser.getAttributeValue(null, "name") != null)
	        		attributeName = parser.getAttributeValue(null, "name");
	        	
	        	if(parser.getAttributeValue(null, "semantic") != null)
	        		attributeSemantic = parser.getAttributeValue(null, "semantic");
	        	
	        	if(parser.getAttributeValue(null, "source") != null)
	        		attributeSource = parser.getAttributeValue(null, "source");
	        	
	        	if(parser.getAttributeValue(null, "offset") != null)
	        		attributeOffset = parser.getAttributeValue(null, "offset");
	        		
	        		tagName = parser.getName();
	        		 Log.d(tagName,"I am here");  
	        	if(tagName!= null && tagName.equalsIgnoreCase("library_geometries")){
        			inLibGeometry= true;
        		}
	        		
	        	    	
	
	        	switch (eventType) {
	        	case XmlPullParser.START_TAG:
	        
	        		if(inLibGeometry){
		        		if(tagName.equalsIgnoreCase("geometry")){
		        			geometry= new Geometry();
		        			 Log.d("geo","I am here");
		        		}else if(tagName.equalsIgnoreCase("mesh")){
		        			geometry.id = attributeId;
		        			geometry.name = attributeName;
		        			 Log.d("mesh","I am here");
		        		}else if(tagName.equalsIgnoreCase("source")){
		        			geometry.sources.add(new Sources());
		        			
		        			sourceCount++;
		        			geometry.sources.get(sourceCount).sourceId = attributeId;
		        			floatCount = -1;
		        			 Log.d("source","I am here");
		        		}else if(tagName.equalsIgnoreCase("float_array")){
		        			
		        			geometry.sources.get(sourceCount).floatArrays.add(new FloatArrays());  
		        			floatCount++;
		        			 Log.d("float array","I am here");
		        		}else if(tagName.equalsIgnoreCase("vertices")){
		        			geometry.vertices = new Vertices();
		        			 Log.d("vertices","I am here");
		        			 inVertices = true;
		        			 vertInputCount = -1;
		        		}else if(tagName.equalsIgnoreCase("polylist") || tagName.equalsIgnoreCase("triangles")){
		        			geometry.polyLists.add(new PolyLists());
		        			polyCount++;
		        			inPolyList = true;
		        			polyInputCount = -1;
		        			polyPCount = -1;
		        			polyVcountCount = -1;
		        			 Log.d("polylist","I am here");
		        		}else if(tagName.equalsIgnoreCase("input")){
		        			if(inPolyList){
			        			geometry.polyLists.get(polyCount).inputs.add(new Inputs());
			        			polyInputCount++;
			        			 Log.d("polyınput","I am here");
		        			}
		        			if(inVertices){
			        			geometry.vertices.inputs.add(new Inputs());
			        			vertInputCount++;
			        			 Log.d("vertInput","I am here");
			        		}
		        		}
	        		}
	        	    // Log.d(tagName,"tagname");
	        		break;
	        	case XmlPullParser.TEXT:
	        		//  Log.d(tagName,"tagname");
	        		break;
	        	case XmlPullParser.END_TAG:
	        	
	        		if(inLibGeometry){	
	        			if(tagName.equals("library_geometries")){
	        				 Log.d("I","I  am breaking");
			        			break outerloop;
	        			}
		        		if(tagName.equalsIgnoreCase("geometry")){
		        			inLibGeometry = false;
		        			 Log.d("geometryENd","I am here");
		        			break outerloop;
		        		
		        		}
		        		else if(tagName.equalsIgnoreCase("float_array")){
		        			geometry.sources.get(sourceCount).floatArrays.get(floatCount).id = attributeId;
		        			
		        			////////////////////////////burannın içine sıçtın kesin düzelt
		        			
		        			//Log.d("text",System.getProperty("line.separator"));
		        		//	text = text.replace("                        ", "");

                        text = text.replaceAll("\\s+", " ");
		        			//if((""+text.charAt(0)).equals(" ")){
		        				text = text.substring(1,text.length()-2);
		        		//	}
		        				
		        		
		        			
		 	        		 for(String s : text.split(" ")){
		 	        			 if(s!=" " || s!="\n")
		 	        			 geometry.sources.get(sourceCount).floatArrays.get(floatCount).floatArray.add(Float.parseFloat(s));
		 	        		 }
		 	        		 Log.d("floatarray END","I am here");
		        		}else if(tagName.equalsIgnoreCase("vertices")){
		        			geometry.vertices.id = attributeId;
		        			 Log.d("verticesEND","I am here");
		        			 inVertices = false;
		        		}else if(tagName.equalsIgnoreCase("polylist") || tagName.equalsIgnoreCase("triangles")){
		        			inPolyList = false;	
		        			 Log.d("polylist END","I am here");
		        		}else if(tagName.equalsIgnoreCase("input")){
		        			if(inPolyList){
			        			geometry.polyLists.get(polyCount).inputs.get(polyInputCount).semantic = attributeSemantic;
			        			geometry.polyLists.get(polyCount).inputs.get(polyInputCount).source = attributeSource;
			        			geometry.polyLists.get(polyCount).inputs.get(polyInputCount).offset = attributeOffset;
			        			 Log.d("inputpolyEND","I am here");
		        			}
		        			if(inVertices){
		        				Log.d(attributeSource,"source");
		        				Log.d(attributeSemantic,"semantic");
		        				geometry.vertices.inputs.get(vertInputCount).source = attributeSource;
		        				geometry.vertices.inputs.get(vertInputCount).semantic = attributeSemantic;
		        				Log.d("inpuvertEND","I am here");
		        			}
		        			
		        		}else if(tagName.equalsIgnoreCase("vcount")){
		        			for(String s : text.split(" ")){
		        				 if(s!=" ")
		        				geometry.polyLists.get(polyCount).vcount.add(Float.parseFloat(s));
		        				polyVcountCount++;
		        			}
		        			 Log.d("vcountEND","I am here");
		        		}else if(tagName.equalsIgnoreCase("p")){

		        			 Log.d("pEND","I just entered here");
		        			text = text.replaceAll("\\s+", " ");
		        			text = text.substring(1,text.length()-2);// buralara dikkat kızım otomatikleştir bunları
		        			for(String s : text.split(" ")){
		        				 if(s!=" " || s!="\n")
		        				geometry.polyLists.get(polyCount).p.add(Float.parseFloat(s));
		        				
		        			}
		        			 Log.d("pEND","I am here");
		        			 break outerloop;
		        		}
	        		}	
	        		break;
	        		
				}
	       
	        	
	        	eventType = parser.next();
	        }
	        
	  
	        Log.d(geometry.sources.get(0).sourceId,"semantic");
	        Log.d(geometry.sources.get(1).sourceId,"semantic");
	        Log.d(" "+geometry.sources.get(0).floatArrays.get(0).floatArray.get(0),"semantic");
	        Log.d(" "+geometry.sources.get(0).floatArrays.get(0).floatArray.get(1),"semantic");
	        
	        Log.d(geometry.vertices.id,"deneme");
	        Log.d(geometry.vertices.inputs.get(0).source,"deneme");
	        
	        Log.d(""+geometry.polyLists.get(0).inputs.get(0).offset,"deneme");
	      //  Log.d(""+geometry.polyLists.get(0).vcount.get(0),"semantic");
	        
	        
	        Log.d(geometry.sources.get(1).sourceId,"semantic");
	        
	        
	        Log.d(" "+geometry.vertices.inputs.get(0).source,"source of positions");
	        Log.d(" "+geometry.polyLists.get(0).inputs.get(0).offset,"source of positions");
	        Log.d(" "+geometry.polyLists.get(0).inputs.get(1).offset,"source of positions");
	        
	        
	        
	       
	        if(geometry.vertices.inputs.get(0).source.contains("Cube_001-mesh-positions")){
	        	Log.d("eslesti","eslesti");
	        }

	        formatArrays();
	       
	        
        }catch(XmlPullParserException e){
        	e.printStackTrace();
        }catch(IOException e){
        	e.printStackTrace();
        }
        
 
     
		return;
	}
	
	public void formatArrays(){
		int s ,k;
		for(s = 0; s<geometry.sources.size();s++){
			Log.d(geometry.vertices.inputs.get(0).source,"vertices soruce");
			Log.d(geometry.sources.get(s).sourceId,"vertices soruce");
			for( k = 0; k<geometry.vertices.inputs.size();k++){
				if(geometry.vertices.inputs.get(k).source.contains(geometry.sources.get(s).sourceId)){
					Log.d("f","f");
					for(int p = 0; p<geometry.polyLists.size();p++){
							for(int i = 0; i<geometry.polyLists.get(p).inputs.size();i++){
								if(geometry.polyLists.get(p).inputs.get(i).source.contains(geometry.vertices.id)){
									
									int o = Integer.parseInt(geometry.polyLists.get(p).inputs.get(i).offset);
									Log.d(""+s,"s");
									Log.d(""+p,"p");
									Log.d(""+i,"i");
									operate(geometry.sources.get(s).floatArrays.get(0).floatArray , o , geometry.polyLists.get(p).vcount , geometry.polyLists.get(p).p , geometry.polyLists.get(p).inputs.size());
									Log.d("d","dson");
								}
							}
						}
					
					
					
				}
			}
			
		}
		
		
		
	}
	public float[] operate(ArrayList<Float> positionFloats,int offset,ArrayList<Float> vcount, ArrayList<Float> p , int maxoffset){
		Log.d(""+positionFloats.get(0),"positionfloats");
	//	Log.d(""+vcount.get(0),"vcount");
		Log.d(""+p.get(0),"p");
		Log.d(""+offset,"o");
		
		for(int i = 0;i<p.size();i++){
			if(i%maxoffset==offset){
				if(offset==0){
					finalList.add(positionFloats.get(Math.round(p.get(i))*3));
					finalList.add(positionFloats.get(Math.round(p.get(i))*3+1));
					finalList.add(positionFloats.get(Math.round(p.get(i))*3+2));
				}else if(offset==1){
					finaNormallList.add(positionFloats.get(Math.round(p.get(i))*3));
					finaNormallList.add(positionFloats.get(Math.round(p.get(i))*3+1));
					finaNormallList.add(positionFloats.get(Math.round(p.get(i))*3+2));
				}
			}
				
		
		}
		
		
		int i = 0;
		vertices = new float[finalList.size()];
		normals = new float[finaNormallList.size()];
				
				
		for (Float f : finalList) {
		    vertices[i++] = (f != null ? f : Float.NaN); // Or whatever default you want.
		    Log.d(""+f,"deneme3");
		}
		for (Float f : finaNormallList) {
		    normals[i++] = (f != null ? f : Float.NaN); // Or whatever default you want.
		    Log.d(""+f,"deneme3");
		}
		
		return vertices;
		
	}
}